/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SeriesLazyImport = createFileRoute('/series')()
const IndexLazyImport = createFileRoute('/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()
const ProfileSeriesLazyImport = createFileRoute('/profile/series')()
const ProfileMoviesLazyImport = createFileRoute('/profile/movies')()
const MovieMovieIdLazyImport = createFileRoute('/movie/$movieId')()

// Create/Update Routes

const SeriesLazyRoute = SeriesLazyImport.update({
  id: '/series',
  path: '/series',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/series.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const ProfileSeriesLazyRoute = ProfileSeriesLazyImport.update({
  id: '/profile/series',
  path: '/profile/series',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/series.lazy').then((d) => d.Route),
)

const ProfileMoviesLazyRoute = ProfileMoviesLazyImport.update({
  id: '/profile/movies',
  path: '/profile/movies',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/movies.lazy').then((d) => d.Route),
)

const MovieMovieIdLazyRoute = MovieMovieIdLazyImport.update({
  id: '/movie/$movieId',
  path: '/movie/$movieId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/movie/$movieId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/series': {
      id: '/series'
      path: '/series'
      fullPath: '/series'
      preLoaderRoute: typeof SeriesLazyImport
      parentRoute: typeof rootRoute
    }
    '/movie/$movieId': {
      id: '/movie/$movieId'
      path: '/movie/$movieId'
      fullPath: '/movie/$movieId'
      preLoaderRoute: typeof MovieMovieIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/movies': {
      id: '/profile/movies'
      path: '/profile/movies'
      fullPath: '/profile/movies'
      preLoaderRoute: typeof ProfileMoviesLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/series': {
      id: '/profile/series'
      path: '/profile/series'
      fullPath: '/profile/series'
      preLoaderRoute: typeof ProfileSeriesLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/series': typeof SeriesLazyRoute
  '/movie/$movieId': typeof MovieMovieIdLazyRoute
  '/profile/movies': typeof ProfileMoviesLazyRoute
  '/profile/series': typeof ProfileSeriesLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/series': typeof SeriesLazyRoute
  '/movie/$movieId': typeof MovieMovieIdLazyRoute
  '/profile/movies': typeof ProfileMoviesLazyRoute
  '/profile/series': typeof ProfileSeriesLazyRoute
  '/profile': typeof ProfileIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/series': typeof SeriesLazyRoute
  '/movie/$movieId': typeof MovieMovieIdLazyRoute
  '/profile/movies': typeof ProfileMoviesLazyRoute
  '/profile/series': typeof ProfileSeriesLazyRoute
  '/profile/': typeof ProfileIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/series'
    | '/movie/$movieId'
    | '/profile/movies'
    | '/profile/series'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/series'
    | '/movie/$movieId'
    | '/profile/movies'
    | '/profile/series'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/series'
    | '/movie/$movieId'
    | '/profile/movies'
    | '/profile/series'
    | '/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  SeriesLazyRoute: typeof SeriesLazyRoute
  MovieMovieIdLazyRoute: typeof MovieMovieIdLazyRoute
  ProfileMoviesLazyRoute: typeof ProfileMoviesLazyRoute
  ProfileSeriesLazyRoute: typeof ProfileSeriesLazyRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  SeriesLazyRoute: SeriesLazyRoute,
  MovieMovieIdLazyRoute: MovieMovieIdLazyRoute,
  ProfileMoviesLazyRoute: ProfileMoviesLazyRoute,
  ProfileSeriesLazyRoute: ProfileSeriesLazyRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/series",
        "/movie/$movieId",
        "/profile/movies",
        "/profile/series",
        "/profile/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/series": {
      "filePath": "series.lazy.tsx"
    },
    "/movie/$movieId": {
      "filePath": "movie/$movieId.lazy.tsx"
    },
    "/profile/movies": {
      "filePath": "profile/movies.lazy.tsx"
    },
    "/profile/series": {
      "filePath": "profile/series.lazy.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
